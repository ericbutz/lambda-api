useDotenv: true

service: ${env:SERVICE}
frameworkVersion: "3"

provider:
  name: aws
  region: ${env:AWS_REGION}
  stage: dev
  # Info on AWS profiles: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
  profile: ${env:PROFILE}
  runtime: nodejs18.x
  environment:
    TABLE_NAME: ${env:TABLE_NAME}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:ConditionCheckItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
      Resource: "arn:aws:dynamodb:*:*:table/*/index/*"

plugins:
  - serverless-esbuild
  - serverless-offline

functions:
  createUser:
    handler: src/handlers/createUser.main
    events:
      - http:
          path: /users
          method: post
          cors: true
  listUsers:
    handler: src/handlers/listUsers.main
    events:
      - http:
          path: /users
          method: get
          cors: true
  getUser:
    handler: src/handlers/getUser.main
    events:
      - http:
          path: /users/{username}
          method: get
          cors: true
  updateUser:
    handler: src/handlers/updateUser.main
    events:
      - http:
          path: /users/{username}
          method: put
          cors: true
  deleteUser:
    handler: src/handlers/deleteUser.main
    events:
      - http:
          path: /users/{username}
          method: delete
          cors: true
  createProduct:
    handler: src/handlers/createProduct.main
    events:
      - http:
          path: /products
          method: post
          cors: true
  listProducts:
    handler: src/handlers/listProducts.main
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProduct:
    handler: src/handlers/getProduct.main
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
  udpateProduct:
    handler: src/handlers/updateProduct.main
    events:
      - http:
          path: /products/{id}
          method: put
          cors: true
  deleteProduct:
    handler: src/handlers/deleteProduct.main
    events:
      - http:
          path: /products/{id}
          method: delete
          cors: true
  listUsersByProduct:
    handler: src/handlers/listUsersByProduct.main
    events:
      - http:
          path: /products/{id}/users
          method: get
          cors: true
  listProductsByUser:
    handler: src/handlers/listProductsByUser.main
    events:
      - http:
          path: /users/{username}/products
          method: get
          cors: true
  createAgent:
    handler: src/handlers/createAgent.main
    events:
      - http:
          path: /agents
          method: post
          cors: true
resources:
  Resources:
    TrussApiTable:
      Type: "AWS::DynamoDB::Table"
      Properties: 
        AttributeDefinitions: 
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "GSI1PK"
            AttributeType: "S"
          - AttributeName: "GSI1SK"
            AttributeType: "S"
        BillingMode: "PAY_PER_REQUEST"
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: 'GSI1'
            KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.TABLE_NAME}